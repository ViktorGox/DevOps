variables:
  TF_VERSION: "1.7.5"

.backend_settings: &backend_settings
  image: gradle:jdk17
  services:
    - name: mariadb:lts-jammy
      alias: mariadb
  variables:
    DATABASE_URL: jdbc:mariadb://mariadb:3306/playlist
    DATABASE_USERNAME: root
    DATABASE_PASSWORD: root_password
    DOCKER_ENV: true

.frontend_settings: &frontend_settings
  image: ghcr.io/cirruslabs/flutter
  cache:
    paths:
      - frontend/dotenv_dev
      - frontend/dotenv_prod

stages:
  - setup
  - frontend
  - backend
  - build_images
  - send_images

run_terraform:
  stage: setup
  image: ubuntu:latest
  script:
    - cat file.txt
    - cat file2.txt
    - apt-get update && apt-get install -y curl jq unzip
    - curl -o /tmp/terraform.zip -LO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
    - unzip /tmp/terraform.zip -d /usr/local/bin/
    - chmod +x /usr/local/bin/terraform
    - terraform --version
    - mkdir -p ~/.aws
    - echo "[default]" > ~/.aws/credentials
    - echo "aws_access_key_id=$MY_AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
    - echo "aws_secret_access_key=$MY_AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
    - echo "aws_session_token=$MY_AWS_SESSION_TOKEN" >> ~/.aws/credentials
    - cat ~/.aws/credentials
    - cd infra
    - chmod +x adapt.sh
    - ./adapt.sh $P_ACCESS_KEY
    - echo $(ls)
  cache:
    key: "terraform-cache"
    paths:
      - file.txt
      - file2.txt
      - .terraform/
      - terraform.tfstate
      - terraform.tfstate.backup
  artifacts:
    paths:
      - .terraform/
      - terraform.tfstate
      - terraform.tfstate.backup
  only:
    - terraform-is-also-executed-in-the-ci-cd

setup_env_files:
  stage: setup
  <<: *frontend_settings
  script:
    - cd frontend
    - echo "SCHEME=$SCHEME" > dotenv_dev
    - echo "API_URL=$LB_DNS" >> dotenv_dev
    - echo "SCHEME=$SCHEME" > dotenv_prod
    - echo "API_URL=$LB_DNS" >> dotenv_prod
  only:
    - ci-cd-uploads-frontend-web-files-as-static-website-in-aws-s3-bucket

build_web_frontend_dev:
  stage: frontend
  <<: *frontend_settings
  script:
    - cd frontend
    - flutter pub run build_runner build
    - flutter build web -t lib/main_dev.dart
  artifacts:
    paths:
      - frontend/build/web
  only:
    - ci-cd-uploads-frontend-web-files-as-static-website-in-aws-s3-bucket

build_web_frontend_prod:
  stage: frontend
  <<: *frontend_settings
  script:
    - cd frontend
    - flutter pub run build_runner build
    - flutter build web -t lib/main_prod.dart
  artifacts:
    paths:
      - frontend/build/web
  cache:
    paths:
      - frontend/dotenv_dev
      - frontend/dotenv_prod
      - frontend/build/web
  only:
    - ci-cd-uploads-frontend-web-files-as-static-website-in-aws-s3-bucket

build_android_app_dev:
  stage: frontend
  <<: *frontend_settings
  script:
    - cd frontend
    - flutter pub run build_runner build
    - flutter build apk -t lib/main_dev.dart
  artifacts:
    paths:
      - frontend/build/app/outputs/flutter-apk
  only:
    - ci-cd-uploads-frontend-web-files-as-static-website-in-aws-s3-bucket

build_android_app_prod:
  stage: frontend
  <<: *frontend_settings
  script:
    - cd frontend
    - flutter pub run build_runner build
    - flutter build apk -t lib/main_prod.dart
  artifacts:
    paths:
      - frontend/build/app/outputs/flutter-apk
  only:
    - ci-cd-uploads-frontend-web-files-as-static-website-in-aws-s3-bucket

test_backend:
  stage: backend
  <<: *backend_settings
  script:
    - cd backend
    - gradle test
  artifacts:
    paths:
      - backend/build/reports/tests/
  only:
    - ci-cd-uploads-frontend-web-files-as-static-website-in-aws-s3-bucket

build_backend:
  stage: backend
  <<: *backend_settings
  script:
    - cd backend
    - gradle build
  artifacts:
    paths:
      - backend/build/libs/*.jar
  only:
    - ci-cd-uploads-frontend-web-files-as-static-website-in-aws-s3-bucket


create_docker_images:
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  stage: build_images
  script:
    - echo $LOGIN_PASSWORD | docker login -u $LOGIN_USERNAME --password-stdin registry.gitlab.com
    - docker-compose build
    - |
      images=$(docker images --format "{{.Repository}}:{{.Tag}}")

      for image in $images; do
        docker push "$image"
      done
  only:
    - ci-cd-uploads-frontend-web-files-as-static-website-in-aws-s3-bucket

#send_image_to_database:
#  stage: send_images
#  image: ubuntu:latest
#  script:
#    - apt-get update && apt-get install -y openssh-client
#    - base64 -d <<< "$AWS_SSH_KEY" > ssh_key.pem
#    - chmod 400 ssh_key.pem
#    - ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$DATABASE_IP \
#      "echo $LOGIN_PASSWORD | sudo docker login -u $LOGIN_USERNAME --password-stdin registry.gitlab.com &&
#      sudo docker rm -f \$(sudo docker ps -aq) || true && sudo docker rmi -f \$(sudo docker images -aq) || true &&
#      sudo docker pull registry.gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/database:latest &&
#      sudo docker tag registry.gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/database:latest database &&
#      sudo docker run -d --name database -p 3306:3306
#      -e MYSQL_ROOT_PASSWORD=root_password
#      -e MYSQL_USER=user
#      -e MYSQL_PASSWORD=password
#      -e MYSQL_DATABASE=playlist
#      database"
#  only:
#    - create-rds-for-database

send_images_to_backend:
  stage: send_images
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
    - apt-get update && apt-get install -y openssh-client
    - base64 -d <<< "$AWS_SSH_KEY" > ssh_key.pem
    - chmod 400 ssh_key.pem
    - mkdir -p ~/.aws
    - echo "[default]" > ~/.aws/credentials
    - echo "aws_access_key_id=$MY_AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
    - echo "aws_secret_access_key=$MY_AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
    - echo "aws_session_token=$MY_AWS_SESSION_TOKEN" >> ~/.aws/credentials
    - echo "[default]" > ~/.aws/config
    - echo "region = $AWS_REGION" >> ~/.aws/config
    - cat ~/.aws/credentials
    - cat ~/.aws/config
    - ips=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text | grep -v "$DATABASE_IP")
    - echo "$ips"
    - for ip in $ips; do
      ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@$ip "echo $LOGIN_PASSWORD | sudo docker login -u $LOGIN_USERNAME --password-stdin registry.gitlab.com &&
      sudo docker rm -f \$(sudo docker ps -aq) || true && sudo docker rmi -f \$(sudo docker images -aq) || true &&
      sudo docker pull registry.gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/backend:latest &&
      sudo docker tag registry.gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/backend:latest backend &&
      sudo docker run -d --name backend -p 8080:8080
      -e DB_USER=user
      -e DB_PASSWORD=password
      -e DB_HOST=$DATABASE_IP
      backend";
      done
  only:
    - ci-cd-uploads-frontend-web-files-as-static-website-in-aws-s3-bucket

set_up_bucket:
  stage: send_images
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
    - mkdir -p ~/.aws
    - echo "[default]" > ~/.aws/credentials
    - echo "aws_access_key_id=$MY_AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
    - echo "aws_secret_access_key=$MY_AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
    - echo "aws_session_token=$MY_AWS_SESSION_TOKEN" >> ~/.aws/credentials
    - cat ~/.aws/credentials
    - cd infra
    - aws s3 cp $CI_PROJECT_DIR/frontend/build/web s3://devops-final-assignment-bobby-viktor-v-side-4/ --recursive
  only:
    - ci-cd-uploads-frontend-web-files-as-static-website-in-aws-s3-bucket
  cache:
    paths:
      - frontend/build/web