.backend_settings: &backend_settings
  image: gradle:jdk17
  services:
    - name: mariadb:lts-jammy
      alias: mariadb
  variables:
    DATABASE_URL: jdbc:mariadb://mariadb:3306/playlist
    DATABASE_USERNAME: root
    DATABASE_PASSWORD: root_password
    DOCKER_ENV: true

.frontend_settings: &frontend_settings
  image: ghcr.io/cirruslabs/flutter
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - frontend/dotenv_dev
      - frontend/dotenv_prod

stages:
  - setup
  - frontend
  - backend
  - build_images
  - send_images

test_backend:
  stage: backend
  <<: *backend_settings
  script:
    - cd backend
    - gradle test
  artifacts:
    paths:
      - backend/build/reports/tests/
  only:
    - ci-cd-builds-docker-images

build_backend:
  stage: backend
  <<: *backend_settings
  script:
    - cd backend
    - gradle build
  artifacts:
    paths:
      - backend/build/libs/*.jar
  only:
    - ci-cd-builds-docker-images

setup_env_files:
  stage: setup
  <<: *frontend_settings
  script:
    - cd frontend
    - echo "SCHEME=$SCHEME_DEV" > dotenv_dev
    - echo "API_URL=$API_URL_DEV" >> dotenv_dev
    - echo "SCHEME=$SCHEME_PROD" > dotenv_prod
    - echo "API_URL=$API_URL_PROD" >> dotenv_prod
  only:
    - ci-cd-builds-docker-images

build_web_frontend_dev:
  stage: frontend
  <<: *frontend_settings
  script:
    - cd frontend
    - flutter pub run build_runner build
    - flutter build web -t lib/main_dev.dart
  artifacts:
    paths:
      - frontend/build/web
  only:
    - ci-cd-builds-docker-images

build_web_frontend_prod:
  stage: frontend
  <<: *frontend_settings
  script:
    - cd frontend
    - flutter pub run build_runner build
    - flutter build web -t lib/main_prod.dart
  artifacts:
    paths:
      - frontend/build/web
  only:
    - ci-cd-builds-docker-images

build_android_app_dev:
  stage: frontend
  <<: *frontend_settings
  script:
    - cd frontend
    - flutter pub run build_runner build
    - flutter build apk -t lib/main_dev.dart
  artifacts:
    paths:
      - frontend/build/app/outputs/flutter-apk
  only:
    - ci-cd-builds-docker-images

build_android_app_prod:
  stage: frontend
  <<: *frontend_settings
  script:
    - cd frontend
    - flutter pub run build_runner build
    - flutter build apk -t lib/main_prod.dart
  artifacts:
    paths:
      - frontend/build/app/outputs/flutter-apk
  only:
    - ci-cd-builds-docker-images

create_docker_images:
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  stage: build_images
  script:
    - echo $LOGIN_PASSWORD | docker login -u $LOGIN_USERNAME --password-stdin registry.gitlab.com
    - docker-compose build
    - |
      images=$(docker images --format "{{.Repository}}:{{.Tag}}")

      for image in $images; do
        docker push "$image"
      done
  only:
    - ci-cd-builds-docker-images

send_images:
  stage: send_images
  image: ubuntu:latest
  script:
    - apt-get update && apt-get install -y openssh-client
    - base64 -d <<< "$SSH_KEY" > ssh_key.pem
    - chmod 400 ssh_key.pem
    - ssh -o StrictHostKeyChecking=no -i ssh_key.pem ubuntu@54.69.168.29 "echo $LOGIN_PASSWORD | sudo docker login -u $LOGIN_USERNAME --password-stdin registry.gitlab.com && sudo docker pull backend:latest"
  only:
    - ci-cd-runs-images-in-ec2-instance


